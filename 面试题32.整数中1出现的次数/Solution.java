/**
 * 题目：输入一个整数 n，求从 1 到 n 这 n 个整数的十进制表示中 1 出现的次数。例如输入 12，
 *		从 1 到 12 这些整数中包含 1 的数字有 1，10，11 和 12，1 一共出现了 5 次。
 */

/*
 * 简单方法：依次遍历 1 至 n，再分别求每个数字中 1 出现的次数。对一个数求 1 出现的次数，则
 *		   对 10 求余数来判断个位是不是 1 ，如果有更高位，再除以10 之后在判断个位是否为 
 *		   1，直到没有更高位为止。
 */
public class Solution {
    public int NumberOf1Between1AndN_Solution(int n) {
    	int count = 0;
    	for (int i = 1; i <= n; i++) {
    		while (i != 0) {
    			if (i % 10 == 1) {
    				count++;
    			}
    			i = i / 10;
    		}
    	}
    	return count;
    }
}

/*
 * 数字规律方法：依次求出数字 X 在个位、十位、百位等等出现的次数，再相加得到最终结果。
 * 	 观察可发现规律如下：从 1 至 10，在它们的个位数中，任意的 X 都出现了 1 次。
 *					 从 1 至 100，在它们的十位数中，任意的 X 都出现了 10 次。
 *					 从 1 至 1000，在它们的千位数中，任意的 X 都出现了 100 次。
 *		即从 1 至 10^i，在它们的左数第二位(右数第i位)，任意的 X 都出现了 10^(i-1)次。
 *
 *   总结后如下：
 *	   当计算右数第 i 位包含的 X 的个数时：
 *			1.取第 i 位左边（高位）的数字，乘以 10^(i-1)，得到基础值 a
 * 		    2.取第 i 位数字，计算修正值：
 *				如果大于 X，则结果为 a+10^(i-1)
 *				如果小于 X，则结果为 a
 *				如果等 X，则取第 i 位右边（低位）数字，设为 b，最后结果为 a+b+1
 */
public class Solution {
    public int NumberOf1Between1AndN_Solution(int n) {
    	int count = 0;
    	int cur = 0;
    	for (int i = 1; n / i != 0; i*=10) {
    		count += (n / (10 * i))* i;//基础值a
    		cur = (n / i) % 10;//当前位的值
    		if(cur > 1){
    			count += i;
    		}else if (cur == 1) {
    			count += n % i + 1;
    		}
    	}
    	return count;
    }
}


